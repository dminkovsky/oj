# docs.ojc

oj.use require 'oj-markdown'
plugins = require './plugins'

_template = require './_template'
{renderTOC, renderContent, renderProperties:properties, renderAttributes:attributes, renderMethods:methods, renderEvents:events, renderInherits:inherits, renderOptions:options, renderArguments:arguments_,renderName:name} = require './_content'

module.exports = ->

  _template

    title: 'OJ Docs - Unified Templating'

    styles: [
      'reset.css'
      'gg.css'
    ]

    scripts: [
      'jquery.js'
      'jquery.event.drag.js'
      'jquery.ba-resize.min.js'
      'underscore.js'
      'backbone.js'
      'coffee-script.js'
      'ace/ace.js'
    ]

    content: ->
      renderContent data

    toc: ->
      renderTOC data

    body: ->
    head: ->

data = [
    h: 'Starting Out', id: 'starting-out', d: ->
    items: [

      h: 'Introduction', id: 'intro', d: """

      OJ simplifies creation and manipulation of the DOM by abstracting the web into objects. It literally stands for Object Javascript, and was created under the philosophy that object encapsulation simplifies development.

      To this end OJ provides several [Collection Types](#collection-types) and [Form Types](#form-types) to help you create your website server side and manipulate it dynamically client-side. Two-way model binding is built right in if you use Backbone models (or anything with `.on` `.off` event binding). Collection binding is built into [oj.List](#List) and [oj.Table](Table), for more complex views.

      For simple tag creation OJ provides a series of [tag functions](#tags), one for every tag (`<div>`, `<span>`, `<ul>`, `<table>`, `<a>`, etc), to build up structure of your site and help create the collection and form types you are using. These tag functions allow you to create html structure, css, and bind jquery events simultaneously.

     To truly master OJ it is encouraged to create your own custom types; [List](#List) and [Table](#Table) are going to get you quite far, but it is much easier to think in terms of `ChatWindow` or `FriendList` than to manually manipulate several things at once by hand. To this end OJ provides a [createType](#createType) function and some inheritable [base types](#base-types) to help you create types of your own. With these base types, model binding is quite easy.

     For server side use of oj a [command-line tool](#command-line) called `oj` can be [installed](#install) with node's package manager `npm`. This tools purpose is to compile [oj file types](#file-types) into `html` files. It supports `--watch` options to help recompile when things change. It also supports minification of html, javascript, and css for production with `--minify`. **Important Note:** This tool is _not_ a web server. It is a static site generator (think for github pages), but for more complex scenarios an [express plugin](http://expressjs.com/) is [in the works](https://github.com/ojjs/oj/issues/1).

      As always contributions are most welcome. Feel free to send [pull requests](https://github.com/ojjs/oj) or to report bugs and feature requests as [issues](https://github.com/ojjs/oj/issues).
      """
    ,
      h: 'License', id: 'license', d: """
        Copyright (c) 2013 Evan Moran <br>
        OJ may be freely distributed under the [MIT license](license.html)

      """
    ]
  ,
    h: 'Creating Tags', id: 'creating-tags', d: ->

    items: [

      h:'oj.tag', id:'tag', d: ->

        md """
          The core function that implements the individual [tag functions](#tag-functions).

        """
        name 'tag(tagName, attributes..., children...)'
        md """
          `tagName` is the string name of a tag such as `"div"`

          `attributes` are any object that maps attribute name to value. These can be in any order after tagName. In addition attributes are smart in a couple ways:

          1. Attributes named after jQuery [mouse](http://api.jquery.com/category/events/mouse-events/) or [keyboard](http://api.jquery.com/category/events/keyboard-events/) events will be bound with jQuery

          1. Style attributes can be defined with an object instead of a string

          1. Style attribute object keys can be written in `camelCase` and will translated to `dashed-case` for you

          1. `class` may be abbreviated as `c`. This is the only abbreviation in OJ, but the class keyword makes it helpful.

        """
        h3 'Example: Create a div with oj.tag'

        TryEditor js:"""
          tag('div', 'Red div', {
            dataValue: '42',
            style:{
              color: 'red'
          }});
        """, cs:"""
          tag 'div', 'Red div',
            dataValue: '42'
            style:
              color: 'red'
        """
    ,
      h:'Tag Functions', id:'tag-functions', d: ->
        md """
          Since tags are a core part of OJ an `oj.<tagName>` function has been created for every tag in HTML. This includes `<div>`, `<input>`, `<button>`, etc.

          These functions support all the fanciness of [oj.tag](#tag) including event binding, and style objects/camelCase.
        """
        h3 "Example: Using some tag functions"
        TryEditor js:"""
          button('button')

          input({type:'text',
            placeholder:'input'});

          input({type:'checkbox'});
        """, cs:"""
          button 'button'

          input type:'text',
            placeholder:'input'

          input type:'checkbox'
        """

        h3 "Example: Nesting tags"
        TryEditor js:"""
          // Create bulleted list
          ul(function(){
            li('Item 1');
            li('Item 2');
            li('Item 3');
            li('Item 4');
            li('Item 5');
          });
        """, cs:"""
          # Create bulleted list
          ul ->
            li 'Item 1'
            li 'Item 2'
            li 'Item 3'
            li 'Item 4'
            li 'Item 5'
        """

        h3 "Example: Creating tags with loops"
        TryEditor js:"""
          // Create bulleted list
          ul(function(){
            for(var n = 1; n <= 5; n++) {
              li('Item ' + n);
            }
          });
        """, cs:"""
          # Create bulleted list
          ul ->
            for n in [1...5]
              li 'Item ' + n
        """
      ]
  ,
    h: 'Creating CSS', id: 'Creating CSS', d: ->

    items: [

      h:'oj.css', id:'css', d: ->

        md """
          The function that defines all css within OJ. This function ties data like a tag function but during the compile step converts the data to CSS. Supports nested selectors, camelCase rules, nested `@media` queries.

          This method can be called multiple times in any context a tag function could be called. Rules will be unioned together. If exactly the same rule is made the last called will be used.
        """
        name 'css(rulesObject)'

        h3 'Example: Create CSS class selectors'

        TryEditor js:"""
          // Create css
          css({
            '.blue':{color:'royalblue'},
            '.big':{fontSize:'25px'}
          });

          // Show the css works
          div({'class':'blue'},
            'This class is blue');

          // class abbreviated as c
          div({c:'big'},
            'This class is big');

          // class can take an array
          div({c:['big', 'blue']},
            'This class is big and blue');
        """, cs:"""
          # Create css
          css
            '.blue': color: 'royalblue'
            '.big': fontSize: '25px'

          # Show the css works
          div 'class':'blue',
            'This class is blue'

          # class abbreviated as c
          div c:'big',
            'This class is big'

          # class can take an array
          div c:['big', 'blue'],
            'This class is big and blue'
        """
    ]

  ,
    h: 'Form Types', id: 'form-types', d: """
      These objects create smart form elements that two-way bind to _parts_ of a model: a model-key. Why only part of a model? The reason is controls usually only affect a single key, for example the `email` field, or `name` field might be bound to a [TextBox](#TextBox). While a  [CheckBox](#CheckBox) might bind to boolean properties `wantsTheNewsletter` or `isRegistered`. These keys can all be on the same `UserModel`, but they affect different things.

      ### Example of binding a TextBox

      Create a user

          var UserModel = new Backbone.Model.extend();
          var user = new UserModel({name:'Evan'});

      Bind TextBox to the user's name

          var TextBox({model: user, key:'name'});

      Two way binding will happen automatically. If you change the model's name the TextBox will update. If you type in the TextBox the model will update.

    The model-key binding syntax works on all Form Types the inherit from [ModelKeyView](#ModelKeyView).

    """
    items: [

      h:'oj.Button', id:'Button', d: ->


        md """
          A built-in OJ type that creates and manipulates a button element. The `label` property can set the button text.

        """
        name 'Button(label, properties)'

        inherits h:'View', id:'View'

        properties [
          h:'label', id:'Button-label', d:"""
            The text of the button ([read-write](#read-write)).
          """
        ]

        methods [
          h:'click(fn)', id:'Button-click', d:"""
            A pass through method to jQuery click event.

            Like the jQuery function, calling with a `fn` will bind that function to the click event. Calling without an argument will cause the button click event to be triggered.
          """
        ]

        h3 'Example: Detect click event'
        TryEditor js:"""
          Button('Knock Knock..', {
            click:function(e){
              alert("Who's there?");
          }});
        """, cs:"""
          Button 'Knock Knock..',
            click: (e) ->
              alert "Who's there?"
        """
    ,
      h:'oj.CheckBox', id:'CheckBox', d: ->

        md """
          An OJ object that creates and manipulates a CheckBox control. The `value` property can be set in the first argument, or through via `properties`.
        """

        name 'CheckBox(value, properties)'

        inherits h:'ModelKeyView', id:'ModelKeyView'

        properties [
          h:'value', id:'CheckBox-value', d:"""
            The value of the control as a boolean ([read-write](#read-write)).

            True means checked. False unchecked.
          """
        ,
          h:'model', id:'CheckBox-model', d:"""
            Bind a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ,
          h:'key', id:'CheckBox-key', d:"""
            Bind a specific key of a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ]

        h3 'Example: Detect CheckBox change event'
        TryEditor js:"""
          CheckBox(true, {
            change:function(e){
              // e is jquery event
              // this is element
              // this.oj is CheckBox instance
              alert(this.oj.value);
          }});
        """, cs:"""
          CheckBox true,
            change:(e) ->
              // e is jquery event
              // this is element
              // this.oj is CheckBox instance
              alert(this.oj.value);
          }});
        """

    ,
      h:'oj.ListBox', id:'ListBox', d: ->

        md """
          A built-in OJ type that creates and manipulates a ListBox form element. Binding to models is supported through [ModelKeyView](#ModelKeyView), The `value` is a string that changes the list box's text. The property `options` **must** be specified so the list box knows which options to drop down.
        """
        name 'ListBox(value, properties)'

        inherits h:'ModelKeyView', id:'ModelKeyView'

        properties [
          h:'value', id:'ListBox-value', d:"""
            The value of the control as a string ([read-write](#read-write)).
          """
        ,
          h:'options', id:'ListBox-options', d:"""
            Array of options that the list box should be allowed to take on.
          """
        ,
          h:'model', id:'ListBox-model', d:"""
            Bind a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ,
          h:'key', id:'ListBox-key', d:"""
            Bind a specific key of a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """

        ]

        h3 'Example: Detecting changes in a ListBox'

        TryEditor js:"""
          ListBox('orange', {
            options:['red','orange','purple'],
            change:function(e){
              // e is jquery change event
              // this is the element
              // this.oj is the ListBox instance
              alert(this.oj.value);
            }
          });
        """, cs:"""
          ListBox 'orange',
            options:['red','orange','purple']
            change:(e) ->
              # e is jquery change event
              # this is the element
              # this.oj is the ListBox instance
              alert this.oj.value
        """

        h3 'Example: Changing ListBox options dynamically'
        TryEditor js:"""
          TextArea({
            live:true,
              //live=true will trigger change
              //  events on all key presses
              //defaults to true

            change:function(e){
              // e is jquery change event
              // this is element
              // this.oj is the TextArea instance
              alert(this.oj.value);
          }});
        """, cs:"""
          TextArea
            live:true
              #live=true will trigger change
              #  events on all key presses
              #defaults to true

            change:(e) ->
              # e is jquery change event
              # @ is element
              # @oj is the TextArea instance
              alert @oj.value
          }});
        """
    ,
      h:'oj.Text', id:'Text', d: ->

        md """
          A built-in OJ type that creates and manipulates a tag such as a `<div>` or `<span>`. Generally this is done with [tag functions](#tag) but occasionally you will want to bind text to model data, or change it dynamically.

          The `value` is a string that changes the text's value.
        """
        name 'Text(value, properties)'

        inherits h:'ModelKeyView', id:'ModelKeyView'

        properties [
          h:'value', id:'Text-value', d:"""
            The value of the tag as a string ([read-write](#read-write)).
          """
        ,
          h:'model', id:'Text-model', d:"""
            Bind a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ,
          h:'key', id:'Text-key', d:"""
            Bind a specific key of a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ]

        h3 'Example: Changing Text automatically'

        TryEditor js:"""
          var myText = Text('Some text..');

          Button('Change It!', {
            click:function(){
              myText.value = 'Changed it!';
            }
          });
        """, cs:"""
          myText = Text 'Some text..'

          Button 'Change It!',
            click: ->
              myText.value = 'Changed it!'
        """
    ,
      h:'oj.TextBox', id:'TextBox', d: ->


        md """
          A built-in OJ type that creates and manipulates a TextBox form element. `value` is a string that changes the text box's text. This type supports binding to models through [ModelKeyView](#ModelKeyView).
        """
        name 'TextBox(value, properties)'

        inherits h:'ModelKeyView', id:'ModelKeyView'

        properties [
          h:'value', id:'TextBox-value', d:"""
            The value of the control as a string ([read-write](#read-write)).
          """
        ,
          h:'model', id:'TextBox-model', d:"""
            Bind a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ,
          h:'key', id:'TextBox-key', d:"""
            Bind a specific key of a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ,
          h:'live', id:'TextBox-live', d:"""
            Change events should update "live" on keypress instead of waiting for blur event (default=true)
          """
        ]

        h3 'Example: Detecting TextBox change event'
        TryEditor js:"""
          TextBox({
            live:false,
              //live:true will trigger change
              //events on all key presses
              //defaults to true

            change:function(e){
              // e is jquery change event
              // this is element
              // this.oj is the TextBox instance
              alert(this.oj.value);
          }});
        """, cs:"""
          TextBox change:(e) ->
            # e is jquery change event
            # this is element
            # this.oj is the TextBox instance
            alert this.oj.value
        """
    ,
      h:'oj.TextArea', id:'TextArea', d: ->

        md """
          A built-in OJ type that creates and manipulates a TextArea form element. Binding to models is supported through [ModelKeyView](#ModelKeyView), The `value` is a string that changes the text box's text. For convenence arguments are joined with newline to allow simple multi-line input in JavaScript.
        """
        name 'TextArea(valueLine1, valueLine2,..., properties)'

        inherits h:'ModelKeyView', id:'ModelKeyView'

        properties [
          h:'value', id:'TextArea-value', d:"""
            The value of the control as a string ([read-write](#read-write)).
          """
        ,
          h:'model', id:'TextArea-model', d:"""
            Bind a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ,
          h:'key', id:'TextArea-key', d:"""
            Bind a specific key of a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ,
          h:'live', id:'TextArea-live', d:"""
            Boolean value indicating if change events should update "live" on keypress instead of waiting for blur event (default=true)
          """

        ]

        h3 'Example: TextArea Multi-line arguments'

        TryEditor js:"""
          var textArea = TextArea(
            'Line 1',
            'Line 2'
          );

          Button('Get Value', {
            // e is jQuery event
            click:function(e){
              alert(textArea.value);
            }
          });
        """, cs:"""
          textArea = TextArea(
            'Line 1'
            'Line 2'
          );

          Button 'Get Value',
            click: (e) ->
              alert textArea.value
        """

        h3 'Example: Detecting TextArea change event'
        TryEditor js:"""
          TextArea({
            live:false,
              //live:true will trigger change
              //events on all key presses
              //defaults to true

            change:function(e){
              // e is jquery change event
              // this is element
              // this.oj is the TextArea instance
              alert(this.oj.value);
          }});
        """, cs:"""
          TextArea change:(e) ->
            # e is jquery change event
            # this is element
            # this.oj is the TextArea instance
            alert this.oj.value
        """

    ,
      h:'Model Binding', id:'form-types-model-binding', d: ->

        md """
          All form controls support model binding through [ModelKeyView](#ModelKeyView).
        """

        h3 'Example: Two-way model binding on a user `name` attribute'
        TryEditor js:"""
          // Create Backbone UserModel
          var User = Backbone.Model.extend();

          // Create a User with name
          var user = new User({name:'Evan'});

          // Bind textbox to the user's name
          TextBox({model:user,key:'name'});
          br();

          // Changing one changes the other
          TextArea({model:user,key:'name'});
          br();

          CheckBox({model:user,key:'name'});
          br();

          ListBox({
            model:user,
            key:'name',
            options:['','Evan','James'],
          });

        """, cs:"""
          # Create Backbone UserModel
          class User extends Backbone.Model

          # Create a User with name
          user = new User name:'Evan'

          # Bind textbox to the user's name
          TextBox model:user, key:'name'
          br()

          # Changing one changes the other
          TextArea model:user, key:'name'
          br()

          CheckBox model:user, key:'name'
          br()

          ListBox model:user, key:'name',
            options:['','Evan','James']
        """

        h3 'Example: Two-way model binding on a user `name` and `strength` attributes'
        TryEditor js:"""
          // Create Backbone UserModel
          var User = Backbone.Model.extend();

          // Create a User with name and strength
          var user = new User({
            name:'Evan',
            strength:40
          });

          // Bind name to Text and TextBox
          TextBox({model:user,key:'name'});
          Text({
            tagName:'span',
            model:user,
            key:'name'
          });
          br()

          // Bind strength to TextBox and ListBox
          TextBox({model:user,key:'strength'});
          ListBox({
            model:user,
            key:'strength',
            options:['',10,20,30,40],
          });
        """, cs:"""
          # Create Backbone UserModel
          class User extends Backbone.Model

          # Create a User with name and strength
          user = new User(
            name:'Evan'
            strength:40
          )

          # Bind name to Text and TextBox
          TextBox model:user, key:'name'
          Text model:user, key:'name',
            tagName:'span'
          br()

          # Bind strength to TextBox and ListBox
          TextBox model:user, key:'name'
          ListBox model:user, key:'name',
            options:['',10,20,30,40],
        """
      ]

  # Collection Types
  # --------------------------------------------------------------------------
  ,
    h: 'Collection Types', id: 'collection-types', d: """
      These objects are built-in to OJ and designed to be the building blocks for more complex websites. [BulletList](#BulletList), [NumberList](NumberList) exist to easily create numbered lists or bulleted lists.

      All collection types can be created directly through a list of arguments, or by binding to a Backbone.Collection object. If a collection object is used these objects will minimally rebuild themselves as the collection changes.

      [List](#List) exists to create lists of items without symbols. It uses `<div>` for its tags instead of `<ul>` or `<li>` as this is often desired for `ChatWindows` or `FriendLists` -- basically this is ideal for whenever you don't really want numbers or bullets.

      [Table](#Table) is the most complex object built into OJ. It supports everything [List](#List) does, but adds another dimension. It also supports Backbone.Collection binding and is designed to support hundreds of thousands of rows. In generally OJ is built around the idea of direct DOM manipulation. Server-side it builds strings, but client side it just modifies elements directly for much improved performance.

      All collection objects inherit from [CollectionView](#CollectionView) and [View](#View) and so definitely take a look at what those provide.

    """

    items: [
      h:'oj.BulletList', id:'BulletList', d: ->
        md """
          This is a simple alias for [oj.List](#List) to abstract creating **bulleted** lists. It overrides the properties [tagName](#List-tagName) to `ul`, and [itemTagName](#List-itemTagName) to `li`.
        """
        TryEditor lineCount:3, js:"""
          BulletList('a','b','c');
        """, cs:"""
          BulletList 'a','b','c'
        """
    ,
      h:'oj.NumberList', id:'NumberList', d: ->
        md """
          This is a simple alias for [oj.List](#List) to abstract creating **numbered** lists. It overrides the properties [tagName](#List-tagName) to `ul`, and [itemTagName](#List-itemTagName) to `li`.
        """
        TryEditor lineCount:3, js:"""
          NumberList('a','b','c');
        """, cs:"""
          NumberList 'a','b','c'
        """
    ,
      h:'oj.List', id:'List', d: ->

        md """
          Lists are at the heart of OJ. They are a fundamental building block that lets you bind collections of models to views. That can be as simple as NumberList and BulletList above. Or they can be more complex and render Chat Messages, Todo Lists, or whatever else you want tied to data.

          Lists can be constructed by basic types:
        """
        TryEditor lineCount:3, js:"""
          List('a',2,true);
        """, cs:"""
          List('a',2,true);
        """
        md """
          Lists can be constructed from oj objects:

        """
        TryEditor lineCount:3, js:"""
          List(_CheckBox(true),
            _TextBox('Hello'))
        """, cs:"""
          List _CheckBox(true),
            _TextBox('Hello')
        """
        name 'List(items..., properties)'

        arguments_ [
          h:'items...', id:'List-argument-items', d:"""
            Any number of values to add to the list.

            Constructing with these arguments has the same effect as setting the [items](List-items) property.
          """
        ,
          h:'properties', id:'Table-argument-rows', d:"""
            An object to bulk set properties.

            Keys that aren't properties are passed as attributes to the root element.
          """        ]
        inherits h:'CollectionView', id:'CollectionView'
        properties [
          h:'count', id:'List-count', d:"""
            Number of items (Number, [read-only](#read-only)))
          """
         ,
          h:'collection', id:'List-collection', d:"""
            Inherited from [CollectionView.collection](#CollectionView-collection)

            The collection for the view. This can be an Array or a Backbone.Collection

            When Backbone is used changes to the collection will cause the view
            to be automatically redrawn. This is done minimally so adds and removes
            cause fewest redraws possible.
          """
         # ,
         #  h:'models', id:'List-models', d:"""
         #    Alias for `collection` property
         #  """
         ,
          h:'each(model)', id:'List-each', d:"""
            Inherited from [CollectionView.each](#CollectionView-each)

            A mapping function that turns a model into a view.

            Use this whenever you set [models](#models) to specify which part of the model to render.
          """
         ,

          h:'tagName', id:'List-tagName', d:"""
            Name of tag (String, write-construct)
          """
         ,
          h:'itemTagName', id:'List-itemTagName', d:"""
            Name of tag for each item (String, [read-write](#read-write))
          """
         ,
          h:'$items', id:'List-$items', d:"""
            Helper to get all item jquery elements ([jQueryElement], [read-only](#read-only)))
          """
        ]
        methods [

          h:'item(index, oj)', id:'List-item', d:"""
            Get or set the item at `index`
            `index` may be negative to access elements at the end.

            When `view` is specified the item is set to the oj view
            When `view` is omitted the item value is returned
            How this value is returned is handled by [ojValue](docs.html#jquery-ojValue)
            a included jQuery plugin.

                list.item(2)              // get item
                list.item(2, 'hello')     // set item to 'hello'
                list.item(2, function(){  // Set item to a TextBox
                  TextBox 'goodbye'
                }
          """
        ,
          h:'$item(index)', id:'List-$item', d:"""
            Helper to get an item's containing element wrapped by jquery
          """
        ,
          h:'add(index, oj)', id:'List-add', d:"""
            Add item at `index`

            `index` may be negative to access elements at the end.

            `oj` may be any oj view or object.

                list = List('a','b');      // ['a','b']
                list.add(1, 'c');          // ['a','c','b']
                list.add(-1, 'd');         // ['a','c','b','d']
          """
        ,
          h:'remove(index)', id:'List-remove', d:"""
            Remove item at index
            `index` may be negative to access elements at the end.

                list = List('a','b','c');  // ['a','b','c']
                list.remove(1);            // ['a','c']
                list.remove(-1);           // ['a']
          """
        ,
          h:'push(oj)', id:'List-push', d:"""
            Add a new last item

                list = List('a','b');      // ['a','b']
                list.push('c');            // ['a','b','c']
          """
        ,
          h:'pop()', id:'List-pop', d:"""
            Remove the last item

                list = List('a','b');      // ['a','b']
                list.pop();                // ['a']
          """
        ,
          h:'shift(oj)', id:'List-shift', d:"""
            Remove the first item

                list = List('a','b');      // ['a','b']
                list.shift();              // ['b']
          """
        ,
          h:'unshift(oj)', id:'List-unshift', d:"""
            Add a new first item

                list = List('a','b');      // ['a','b']
                list.unshift('c');         // ['c','a','b']
          """
        ,
          h:'clear(oj)', id:'List-clear', d:"""
            Remove all items

                list = List('a','b');      // ['a','b']
                list.clear();              // []
          """
        ,
          h:'move(ix, ix2)', id:'List-move', d:"""
            Move item from index `ix` to index `ix2`

            list = List('a','b','c');      // ['a','b','c']
                list.move(2,0);            // ['c','b','a']
          """
        ,
          h:'swap(ix, ix2)', id:'List-swap', d:"""
            Swap items at index `ix` to index `ix2`

            list = List('a','b','c');      // ['a','b','c']
                list.swap(1,2);            // ['a','c','b']
          """
        ]
    ,
      h:'oj.Table', id:'Table', d: ->

        md """
          Tables are another building block in OJ. Like [List] it can be used to show static data or be bound to collections of models. When the collection changes it will automatically add and remove rows to rerender the table.

          Tables can be constructed with arrays of values:

              Table(
                [1,2,3],
                [4,5,6]
              );
        """
        name 'Table(rows..., properties)'

        arguments_ [
          h:'rows...', id:'Table-argument-rows', d:"""
            Any number of rows to add to the table.

            Constructing with these arguments has the same effect as setting the [items](List-items) property.
          """
        ,
          h:'properties', id:'Table-argument-properties', d:"""
            A object to bulk set properties.

            Keys that aren't properties are passed as attributes to the root element.
          """
        ]
        inherits h:'CollectionView', id:'CollectionView'
        properties [
          h:'rowCount', id:'Table-rowCount', d:"""
            Number of rows (Number, [read-only](#read-only)))
          """
         ,
          h:'columnCount', id:'Table-columnCount', d:"""
            Number of columns (Number, [read-only](#read-only)))
          """
         ,
          h:'collection', id:'Table-collection', d:"""
            Inherited from [CollectionView.collection](#CollectionView-collection)

            The collection for the view. This can be an Array or a Backbone.Collection

            When Backbone is used changes to the collection will cause the view
            to be automatically redrawn. This is done minimally so adds and removes
            cause fewest redraws possible.
          """
         # ,
         #  h:'models', id:'Table-models', d:"""
         #    Alias for `collection` property
         #  """
         ,
          h:'each(model,cell)', id:'Table-each', d:"""
            Inherited from [CollectionView.each](#CollectionView-each)

            A mapping function that turns a model into a view.

            Use this whenever you set [models](#models) to specify which part of the model to render.
          """
         ,
          h:'$trs', id:'Table-$trs', d:"""
            Accessor to all row `<tr>` elements ([read-only](#read-only))
          """
         ,
          h:'$ths', id:'Table-$ths', d:"""
            Accessor to all `<th>` elements ([read-only](#read-only))
          """

         ,
          h:'$table', id:'Table-$table', d:"""
            Accessor to `<table>` element ([read-only](#read-only))
          """
         ,
          h:'$thead', id:'Table-$thead', d:"""
            Accessor to `<thead>` element ([read-only](#read-only))
          """
         ,
          h:'$tbody', id:'Table-$tbody', d:"""
            Accessor to `<tbody>` element ([read-only](#read-only))
          """
         ,
          h:'$tfoot', id:'Table-$tfoot', d:"""
            Accessor to `<tfoot>` element ([read-only](#read-only))
          """
         ,
          h:'$caption', id:'Table-$caption', d:"""
            Accessor to `<caption>` element ([read-only](#read-only))
          """
         ,
          h:'$colgroup', id:'Table-$colgroup', d:"""
            Accessor to `<colgroup>` element ([read-only](#read-only))
          """
         ,
          h:'$theadTR', id:'Table-$theadTR', d:"""
            Accessor to `<tr>` element in `<thead>` ([read-only](#read-only))
          """
         ,
          h:'$tfootTR', id:'Table-$tfootTR', d:"""
            Accessor to `<tr>` element in `<tfoot>` ([read-only](#read-only))
          """
        ]
        methods [

          h:'row(rx, ojArray)', id:'Table-row', d:"""
            Get or set the row at row index `rx`
            `rx` may be negative to access elements at the end.

            When `ojArray` is specified the row cells are set to the specified oj views.

            When `ojArray` is omitted the row values are returned.

            How this value is returned is handled by [ojValue](docs.html#jquery-ojValue) jQuery plugin.

          """
        ,
          h:'cell(rx, cx, oj)', id:'Table-cell', d:"""
            Get or set the cell at row index `rx`, column index `cx`

            `rx` and `cx` may be negative to access elements at the end.

            When `oj` is specified the cell is set to the value of the oj view.

            When `oj` is omitted the cell value is returned.

            How this value is returned is handled by [ojValue](docs.html#jquery-ojValue) jQuery plugin.
          """
        ,
          h:'clear()', id:'Table-clear', d:"""
            Remove everything in the table: rows, headers, footers, and captions.
          """
        ,
          h:'clearBody()', id:'Table-clearBody', d:"""
            Remove all rows in body
          """
        ,
          h:'clearHeader()', id:'Table-clearHeader', d:"""
            Remove the header
          """
        ,
          h:'clearFooter()', id:'Table-clearFooter', d:"""
            Remove the footer
          """
        ,
          h:'addRow(rx, ojArr)', id:'Table-addRow', d:"""
            Add row at index `rx`

            `rx` may be negative to access elements at the end.

            `ojArr` is an array of any oj views or objects.
          """
        ,
          h:'removeRow(rx)', id:'Table-removeRow', d:"""
            Remove item at index `rx`
          """
        ,
          h:'pushRow(ojArr)', id:'Table-pushRow', d:"""
            Add a new last row

            `ojArr` is an array of oj views or objects.
          """
        ,
          h:'popRow()', id:'Table-popRow', d:"""
            Remove the last row
          """
        ,
          h:'shiftRow()', id:'Table-shiftRow', d:"""
            Remove the first row and return it.
          """
        ,
          h:'unshiftRow(ojArr)', id:'Table-unshiftRow', d:"""
            Add a new first row
            `ojArr` is an array of oj views or objects.
          """
        ,
          h:'moveRow(rx, rx2)', id:'Table-moveRow', d:"""
            Move row from index `rx` to `rx2`
          """
        ,
          h:'swapRow(rx, rx2)', id:'Table-swapRow', d:"""
            Swap row at index `rx` to `rx2`
          """
        ,
          h:'$tr(rx)', id:'Table-$tr', d:"""
            Accessor to `<tr>` at row index `rx`
          """
        ,
          h:'$td(rx,cx)', id:'Table-$tr', d:"""
            Accessor to `<td>` at row index `rx`, column index `cx`
          """
        ]

    ]

  ,
    h: 'Creating Types', id: 'creating-types', d: """
      The point of OJ is creating types that better abstract the web. To do this OJ includes a function called [oj.createType](#createType).

      ### Features

      * Creates 100% real javascript types
      * Works seemlessly between javascript and coffee-script
      * First class properties support:
        * Properties by value
        * Properties by get and set functions
      * Supports Constructors and Methods
      * Supports Inheritance
        * `inherits` up to one Type
        * Call super with `this.super.methodName()`
      * `new` is optional

    """
    items: [
      h:'oj.createType', id:'createType', d: ->

        md """
          This function creates new type constructors. is a big part of why OJ types are so easy to create and use. Generally you should create new types when the component is well understood and often when it has an analogous model.
        """

        name 'createType(name, options)'

        arguments_ [
          h:'name', id:'Type-argument-name', d:"""
            The string name of the type you want to create.
          """
        ,
          h:'options', id:'Type-argument-options', d:"""
            An object that specifies `properties`, `methods`, `constructor`, and an inheritance `base` type.

            See more information below:
          """
        ]

        options [
          h:'base:', id:'Type-option-base', d:"""
            The type to inherit. When making OJ views use a [base type](#base-types).
          """
        ,
          h:'properties:<obj>', id:'Type-option-properties', d:"""
            Define the type's properties.
          """
        ,
          h:'methods:<obj>', id:'Type-option-methods', d:"""
            Define the type's methods.

            To call super use: `TypeName.base.methodName.apply(this, arguments);
          """
        ,
          h:'constructor:<fn>', id:'Type-option-methods', d:"""
            Optionally define a constructor. `this` will be bound correctly.

            To call super use: `TypeName.base.constructor.apply(this, arguments);
          """

        ]

        md """

          ### Example

              // Create a User type
              var User = oj.createType('User', {

                constructor: function(props){
                  // Built in method to set all
                  // properties by name
                  this.set(props);
                },

                // Create properties
                properties: {
                  name: null,
                  birthDate: null,

                  // The age property is calculated
                  // automatically from birthDate
                  age: {
                    get: function(){
                      var today = new Date();

                      var age = today.getFullYear() -
                        this.birthDate.getFullYear();

                      var month = today.getMonth() -
                        this.birthDate.getMonth();

                      var birthDateIsAfterToday = (
                        month == 0 && (
                          today.getDate() <
                           this.birthDate.getDate()
                        )
                      );
                      if (birthDateIsAfterToday)
                        age--;
                      return age;
                    }
                  }
                },

                // Create methods
                methods: {
                  isEighteen: function(){
                    return this.age >= 18;
                  }
                }
              });

              // Create the user named Batman
              var user = new User({
                name:'Batman',
                birthDate:new Date(1974,2,1)
              });

              // Show that the age property works
              div(user.name + ' is ' +
                user.age + ' years old.');

              div(user.name + ' is eighteen: ',
                function(){
                  strong(user.isEighteen())
                }
              );

        """
    ,
      h:'Type Interface', id:'Type', d: ->

        md """
          All types created by [oj.createType](#createType) have the following methods and properties.
        """
        properties [
          h:'type', id:'Type-type', d:"""
            The type that made this instance ([read-only](#read-only))
          """
        ,
          h:'typeName', id:'Type-typeName', d:"""
            The name of type that made this instance ([read-only](#read-only))
          """
        ,
          h:'properties', id:'Type-properties', d:"""
            Array of all properties the type supports ([read-only](#read-only))
          """
        ,
          h:'methods', id:'Type-methods', d:"""
            Array of all methods the type supports ([read-only](#read-only))
          """
        ]
        methods [
          h:'get()', id:'Type-get', d:"""
            Get all properties as an object
          """
        ,
          h:'get(prop)', id:'Type-get', d:"""
            Get the value of property `prop`. `undefined` is returned if `prop` is not a valid property
          """
        ,
          h:'set(prop,val)', id:'Type-set', d:"""
            Set property `prop` to value `val`
          """
        ,
          h:'set(props)', id:'Type-set', d:"""
            Set all properties at once. `props` is an object mapping key to value. Invalid keys defined in `props` are ignored.
          """
        ,
          h:'has(prop)', id:'Type-has', d:"""
            Determine if string `prop` is a property of this instance
          """
        ,
          h:'can(method)', id:'Type-has', d:"""
            Determine if string `method` is a method of this instance
          """
        ,
          h:'toJSON()', id:'Type-toJSON', d:"""
            Convert properties to json
          """
        ]
    ]
  ,
    h: 'Base Types', id: 'base-types', d: """
      For those of you who want to make your own rich oj views, there are a few inheritable types that will make your life easier.

      [View](#View) - The heart of OJ, this makes objects behave like [tag functions](#tag).

      [ModelKeyView](#ModelKeyView) - Binds the view to a part of a model (a model + key). Used by all the [form elements](#form-types). Great for creating two-way bindings.

      [CollectionView](#CollectionView) - Bind the view to a collection of models. Used by [List](#List) and [Table](#Table). Automatically binds to collection add, remove, change events.
    """
      # [ModelView](#ModelView) - Bind the view to a model. Good for simple views that should re-render when changed.
    items: [
      h:'oj.View', id:'View', d: ->
        md """
          This object is the basis of much of the functionality of OJ. It emits creation events so that objects act like [oj.tag](#tag). It creates the root element of your object and gives convenient access to it through [el](#View-el). It provides an [attributes](#View-attributes) property and related methods to let you set and get attributes.

          All types created using [oj.createType](#createType) behave this way.

              var textbox = TextBox({value:'my text'});

          Is the same as:

              var textbox = TextBox();
              textbox.value = 'my text';

          (Note: because [oj.createType](#createType) removes the need to use `new`, so in the above example it wasn't necessary to call `new TextBox()`. See [oj.createType](#createType) if you want to learn more about why this was done.)

          Any options that don't map to properties will be passed through to the root element as attributes. This lets this work as you would expect:

              TextBox({value:'Placeholder text', id:'id123', style:{color:'red'}})

          Also options can come in any order. This is especially useful for defining style ()

              TextBox({id:'id123'}, 'my text', {style:{
                  color:'red'
                }
              })
        """
        properties [
          h:'el', id:'View-el', d:"""
            The root element ([read-only](#read-only), [cached](#cached)).
          """
        ,
          h:'$el', id:'View-$el', d:"""
            The jquery-enabled root element ([read-only](#read-only), [cached](#cached))
          """
        ,
          h:'attributes', id:'View-attributes', d:"""
            Get all attributes for the root element ([read-only](#read-only))
          """
        ]
        methods [

          h:'addAttribute(name,value)', id:'View-addAttribute', d:"""
            Add an attribute. Supports everything [oj.tag](#tag) supports, including jQuery events and `style` renaming such as `fontSize` to `font-size`.
          """
        ,

          h:'addAttribute(name,value)', id:'View-addAttribute', d:"""
            Add an attribute. Supports everything [oj.tag](#tag) supports, including jQuery events and `style` renaming such as `fontSize` to `font-size`.
          """
        ,

          h:'addAttributes(obj)', id:'View-addAttributes', d:"""
            Add multiple attributes at once. Supports everything [oj.tag](#tag) supports. Including jQuery events and `style` renaming such as `fontSize` to `font-size`.
          """
        ,

          h:'removeAttribute(name)', id:'View-addAttribute', d:"""
            Remove attribute with by `name`.
          """
        ,

          h:'removeAttributes(list)', id:'View-addAttributes', d:"""
            Remove all attributes in the list.
          """
        ,

          h:'$(selector)', id:'View-$', d:"""
            Find elements from root with jQuery.
          """
        ,
          h:'toHTML()', id:'View-toHTML', d:"""
            Convert view to html
          """
        ,
          h:'toDOM()', id:'View-toDOM', d:"""
            Convert view to dom
          """
        ,
          h:'toString()', id:'View-toString', d:"""
            Convert view to a string. By default this calls toHTML()
          """

        #   h:'detach', id:'View-detach', d:"""
        #     (Not Yet Implemented)

        #     Detach the element from the dom leaving a placeholder
        #     so that it can be reattached in the same place.
        #   """
        # ,
        #   h:'attach', id:'View-attach', d:"""
        #     (Not Yet Implemented)

        #     Attach the element from the dom leaving a placeholder
        #     so that it can be reattached in the same place.
        #   """

        ]

        ###
    # Key used to access model
    key: null

    # Live update model as text changes
    live: true
    value:
      get: -> throw "#{@typeName} value getter not implemented"
      set: (v) -> throw "#{@typeName} value setter not implemented"

    modelChanged: ->
    viewChanged: ->
  ###
    ,
      h:'oj.ModelKeyView', id:'ModelKeyView', d: ->

        inherits h:'View', id:'View'

        properties [
          h:'model', id:'ModelKeyView-model', d:"""
            The model part of the model-key that partially binds a model. Both key and model are required.
          """
        ,
          h:'key', id:'ModelKeyView-key', d:"""
            The key part of the model-key that partially binds a model. Both key and model are required.
          """
        ]
        events [
          # TODO: Include params to these event methods
          h:'modelChanged(...)', id:'ModelKeyView-modelChanged', d:"""
            Overridable event method called when the model is changed

            When overriding be sure to call the base method
          """
        ,
          h:'viewChanged(...)', id:'CollectionView-viewChanged', d:"""
            Call this event method to when the view changes. This will cause the model to be updated automatically.
          """
        ]
    ,
      h:'oj.CollectionView', id:'CollectionView', d: ->

        inherits h:'View', id:'View'

        properties [
          h:'collection', id:'CollectionView-collection', d:"""
            The inherited collection property for the view. This can be an Array or a Backbone.Collection.

            When Backbone is used changes the CollectionView automatically binds to changes in the collection and calls the following methods:

            * `collectionModelAdded`
            * `collectionModelRemoved`
            * `collectionModelChanged`
            * `collectionModelDestroyed`
            * `collectionReset`

            When implementing a oj.CollectionView these event methods should be overriden to correctly update state as the collection changes.
          """
        ,
          h:'models', id:'CollectionView-models', d:"""
            Alias for `collection` property.
          """
        ]
        events [
          # TODO: Include params to these event methods
          h:'collectionModelAdded(...)', id:'CollectionView-collectionModelAdded', d:"""
            Overridable event method called when a model is added to the collection
          """
        ,
          h:'collectionModelRemoved(...)', id:'CollectionView-collectionModelRemoved', d:"""
            Overridable event method called when a model is removed from the collection
          """
        ,
          h:'collectionModelChanged(...)', id:'CollectionView-collectionModelChanged', d:"""
            Overridable event method called when a model changes
          """
        ,
          h:'collectionModelDestroyed(...)', id:'CollectionView-collectionModelDestroyed', d:"""
            Overridable event method called when a model is destroyed
          """
        ,
          h:'collectionReset()', id:'CollectionView-collectionReset', d:"""
            Overridable event method called when the entire collection is remade
          """
        ]

    ]

  ,
    h: 'Commandline Tool', id: 'commandline', d: """
      OJ has the capability of building static websites on the command-line using the [oj command](#command-line). This is best for sites that don't change content upon request -- think Github Pages. This does not mean the site cannot have ajax requests and dynamic content, just that the tool isn't for building that.

      ### Features

        * _Unified Templating:_ `.oj` and `.ojc` generate js, html, and css
        * Built in coffee-script support: `.oj` means javascript, `.ojc` means coffee-script.
        * _Minification:_ All js, css, html will be minified when `--minify` is set
        * Files and Directories can be built, recursed upon, and *watched*
        * Files can be included from other files using node's `require` syntax.
        * Node modules can be included as well. Simply `require` them, and they will also be brought into the system (similar to [browserify](http://browserify.org/)).
        * Built in support for coffee-script with `.ojc` files. You don't even need to install coffee-script, it just works.
    """
    items: [

      h: 'Install', id: 'install', d: """

        To use OJ on the server you will need to install the `oj` command built on top of [node.js](http://nodejs.org). For this you need to install node. There are many ways to do this installation, but this will get you started:

        ### Install Node

        Install `node` on OSX with [homebrew](http://mxcl.github.com/homebrew/):

            brew install node

        Install `node` on Ubuntu with apt-get:

            sudo apt-get install nodejs npm

        ### Install OJ Command

        Finally install `oj` with `npm`:

            npm install -g oj
      """
    ,
      h: 'File Types (.oj / .ojc)', id: 'file-types', d: """
        The [oj.js](#download) javascript library works perfectly fine inside of `.js`, or `.coffee` files. The only issue is that it gets tiring writing `oj` in front of everything: `oj.html`, `oj.Table`, etc.

        To solve this OJ supports two file types:

        * `.oj` is javascript
        * `.ojc` is coffee-script

        These files have been fully integrated into node. This means you can include other files using `require`, and you must use `module.exports` to set the what the module should return. Here are some examples:

        ### .oj example (javascript):

            # hello.oj
            module.exports = return [html,
              [head],
              [body,
                [div 'Hello world']
              ]
            ]

        ### .ojc example (coffee-script):

            # hello.ojc
            module.exports = ->
              html ->
                head ->
                body ->
                  div 'Hello world'

      """
    ,
      h: 'Usage', id: 'command-line-usage', d: """
        The `oj` command builds `.oj` and `.ojc` [file types](#file-types) into `.html` files.

            oj [options] <file> <dir> ...

            Options:

              -h, --help             output usage information
              -V, --version          output the version number
              -m, --minify           Turn on minification (default: false)
              -o, --output <dir>     Directory to output all files to (default: .)
              -r, --recurse          Recurse into directories (default: off)
              -v, --verbose <level>  Turn on verbose level 0-3 (default: 1)
              -w, --watch            Turn on watch mode (default: off)

        When options are omitted these are the defaults:

            --output defaults to ./
            --minify defaults to off<br>
            --verbose defaults to 1

        ### Ignored file prefixes

          * Partials and Templates (start with `_`)
          * OJ Plugins (start with `oj.`)
          * Hidden files (start with `.`)

        ### Examples

        Build `hello.oj` to current directory

            oj hello.oj

        Build `hello.oj` without minification to `www` directory

            oj -d -o www hello.oj

        Watch `hello.oj` and build to `www` directory

            oj --watch -o www hello.oj

        Build `pages` directory to `www`

            oj -o www pages

        Recursively build `pages` directory to `www`

            oj -r -o www pages

        Recursively watch and build `pages` directory to `www`

            oj -w -r -o www pages

      """


    ]
]




###


          <dl class='row'>
            <dt class='gg25'>make()</dt><dd class='gg75'>
            Create the initial dom element with oj.<br>
            <br>
            Calling make should generate the same result if called
            multiple times. Specifically if you generate an id you
            should store it in `this.id` and reuse the same id
            each time.
            </dd>
          </dl>
Command Line


Helper Methods

  oj.isUndefined
  oj.isBoolean
  oj.isNumber
  oj.isString
  oj.isDate
  oj.isFunction
  oj.isArray
  oj.isRegEx
  oj.isDOM
  oj.isDOMElement
  oj.isDOMAttribute
  oj.isDOMText
  oj.isjQuery
  oj.isBackbone
  oj.isOJ
  oj.isArguments
  oj.addProperty
  oj.addProperties
  oj.addMethod
  oj.addMethods

Form Libraries
  All Controls
    model: <Backbone>, auto watch for change events
    key:  <string>  stores key to change in model
    value: <bool>
    formh: control name value when posting (maps to attr: name, defaults to key)
    formValue: control value value when posting a form (maps to attr:value, defaults to value.toString())

    # Custom event triggered when the view OR the model changes
    modelChanged: (control) -> only when model changes
    viewChanged: (control) -> only when view changes

  Form
  CheckBox   change = check/uncheck
  ListBox  change = select thing
  TextBox  change = keyup
  TextArea    change = keyup


  FilterBox  change = select thing
  SearchBox change = keyup

Utility Libraries

  md
  mustache

Examples

FAQ

Versions













###